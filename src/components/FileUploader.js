import React, { useState } from "react";
import axios from "axios";
import { useDropzone } from "react-dropzone";
import { FaCloudUploadAlt } from "react-icons/fa";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import LinearProgress from "@mui/material/LinearProgress"; // Import Linear Progress from Material UI
import "../css/FileUploader.css";

const FileUploader = ({ onFileUploadSuccess }) => {
  const [selectedFileName, setSelectedFileName] = useState("No file selected");
  const [isFileUploaded, setFileUploaded] = useState(false);
  const [isUploading, setUploading] = useState(false); // Added state for uploading animation

  const handleFileChange = async (acceptedFiles) => {
    if (acceptedFiles && acceptedFiles.length > 0) {
      const file = acceptedFiles[0];
      setSelectedFileName(file.name);
      console.log(file);
      await uploadFileToBackend(file);
    } else {
      setSelectedFileName("No file selected");
    }
  };

  const { getRootProps, getInputProps } = useDropzone({
    onDrop: handleFileChange,
  });

  const uploadFileToBackend = async (file) => {
    setUploading(true); // Start the uploading animation

    const formData = new FormData();
    formData.append("xml_file", file);

    try {
      const responseUpload = await axios.post(
        "https://ccda.onrender.com/upload", // Your API endpoint for file upload
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      console.log("File upload success:", responseUpload.data);
      toast.success("File uploaded successfully!");
      setFileUploaded(true);
      setUploading(false); // Stop the uploading animation

      // Now, make a separate API call to /extract_dynamic_data
      try {
        const responseExtract = await axios.get(
          "https://ccda.onrender.com/extract_dynamic_data"
        );

        console.log("Dynamic data extracted:", responseExtract.data);

        // Call the parent component's callback with the extracted data
        onFileUploadSuccess(file.name, responseExtract.data, true);
      } catch (error) {
        console.error("Error extracting dynamic data:", error);
      }
    } catch (error) {
      toast.error("Error uploading file");
      setFileUploaded(false);
      setUploading(false); // Stop the uploading animation
      console.error("Error uploading file:", error);
    }
  };

  return (
    <div className="file-uploader">
      <div className="section-paper">
        <h3>Upload an XML File or C-CDA document to view.</h3>
        <p>
          <b>One-Click C-CDA Viewing:</b> This feature allows for quick viewing
          and printing of standard C-CDA documents. Genzeon's HiP renders .xml
          data generated by EHRs in C-CDA format and presents the information as
          a human-readable document. The user may set all C-CDA documents to be
          rendered in a consistent way or apply customized style sheets for
          different viewing purposes.
          <b>
            The C-CDA document will be temporarily rendered for this session
            only. The Genzeon's HiP server will not retain any content related
            to this C-CDA once the session is closed.
          </b>
        </p>
      </div>
      <div className="component">
        <div className="content">
          <h3 className="title">CCDA Summarization</h3>
          <div className="box">
            {isUploading ? (
              // Show Linear Progress when uploading
              <LinearProgress />
            ) : !isFileUploaded ? (
              <div {...getRootProps()} className="dropzone">
                <input {...getInputProps()} />
                <FaCloudUploadAlt size={35} />
                <p>Drag and drop your PDF file here, or click to browse</p>
                <span className="limit">Limit 200MB PDF, TXT</span>
                <p className="selected-file-name">{selectedFileName}</p>
              </div>
            ) : (
              <div>
                <p>File uploaded successfully: {selectedFileName}</p>
              </div>
            )}
          </div>
        </div>
        <ToastContainer />
      </div>
    </div>
  );
};
export default FileUploader;
